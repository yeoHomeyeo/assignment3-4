name: Build, Push to ECR, and Deploy to ECS

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: cy-flask-private-repository
  ECS_CLUSTER: cy-cluster
  ECS_SERVICE: cy-flask-ecs-taskdef-service-zvbe4vsa
  TASK_DEFINITION: cy-flask-ecs-taskdef

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        id: build-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Prepare task definition
        id: prepare-task-def
        run: |
          # Get current task definition and clean it
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION \
            --query 'taskDefinition' > full-task-definition.json
          
          # Remove invalid fields
          jq 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy, .enableFaultInjection)' \
            full-task-definition.json > task-definition.json
          
          # Update container image
          CONTAINER_NAME=$(jq -r '.containerDefinitions[0].name' task-definition.json)
          jq --arg image "${{ steps.build-push.outputs.image }}" \
            --arg containerName "$CONTAINER_NAME" \
            '.containerDefinitions |= map(if .name == $containerName then .image = $image else . end)' \
            task-definition.json > updated-task-definition.json
          
          mv updated-task-definition.json task-definition.json
          echo "container_name=$CONTAINER_NAME" >> $GITHUB_OUTPUT

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          force-new-deployment: true

      - name: Verify deployment
        run: |
          echo "Successfully deployed ${{ steps.build-push.outputs.image }} to ECS"
          echo "Service: ${{ env.ECS_SERVICE }}"
          echo "Cluster: ${{ env.ECS_CLUSTER }}"
          echo "Container: ${{ steps.prepare-task-def.outputs.container_name }}"